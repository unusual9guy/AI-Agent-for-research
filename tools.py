from langchain_community.tools import WikipediaQueryRun, DuckDuckGoSearchRun
from langchain_tavily import TavilySearch
from langchain_community.utilities import WikipediaAPIWrapper
from langchain.tools import Tool
from langchain.tools import StructuredTool
from datetime import datetime
from dotenv import load_dotenv
import os
import re
import matplotlib.pyplot as plt
import uuid
import requests


load_dotenv()


# ----------------------------- DUCKDUCK GO  -----------------------------
# with duckduckgo search - discarded due to rate limits
# search = DuckDuckGoSearchRun()
# search_tool = Tool(
#     name="search_web", # there should be no space in the name 
#     func=search.run, 
#     description="Search the web for information", # you can also give a detailed description for a specific scenario 
# )



# ----------------------------- TAVILY SEARCH TOOL -----------------------------
tavily = TavilySearch(k=5)  # You can adjust k as needed

search_tool = Tool(
    name="web_search_tool",
    func=tavily.run,
    description=(
        "Use this tool to perform detailed, real-time web searches for recent or general information. "
        "Best used when the query requires up-to-date facts, statistics, news articles, or diverse sources. "
        "Returns summarized snippets from top-ranking pages."
    )
)

# -----------------------------  WIKIPEDIA SEARCH TOOL -----------------------------
api_wrapper = WikipediaAPIWrapper(top_k_results=3, lang="en", doc_content_chars_max=1000)

wiki_tool = Tool(
    name="wikipedia_lookup",
    func=WikipediaQueryRun(api_wrapper=api_wrapper).run,
    description=(
        "Use this tool to retrieve authoritative encyclopedic information about general topics from Wikipedia. "
        "Ideal for definitions, historical facts, scientific concepts, biographies, etc."
    )
)

# ----------------------------- CUSTOM SAVE TOOL -----------------------------

def sanitize_topic_for_filename(topic: str) -> str:
    # Removing special characters, keep alphanumerics and spaces, then replacing spaces with underscores
    topic = re.sub(r'[^a-zA-Z0-9 ]', '', topic)
    topic = re.sub(r'\s+', '_', topic.strip())
    return topic

def save_to_txt(data: str, topic: str) -> str:
    os.makedirs("outputs", exist_ok=True)  # Save to a folder
    filename = f"{sanitize_topic_for_filename(topic)}_output.md"
    filepath = os.path.join("outputs", filename)
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    
    # Formatting the data as markdown
    formatted_text = f"""# Research Report\n*Generated on: {timestamp}*\n\n{data}\n\n---\n*This report was generated by an AI research assistant.*\n"""
    with open(filepath, "w", encoding="utf-8") as f:
        f.write(formatted_text)
    return f"âœ… Research report successfully saved to {filepath}"

save_tool = StructuredTool.from_function(
    name="save_text_to_file",
    description=(
        "Saves structured research data as a markdown document in the 'outputs/' folder. "
        "The filename will be based on the research topic. "
        "Use this to persist final, long-form academic papers in markdown format. "
        "Arguments: data (markdown string), topic (string, the research topic for filename)."
    ),
    func=save_to_txt,
    args_schema=None  # Allowing LangChain infer from function signature
)

def verify_image_url(url: str) -> bool:
    """
    Checks if the given URL is reachable and returns an image content-type.
    Returns True if valid image, False otherwise.
    """
    try:
        response = requests.head(url, allow_redirects=True, timeout=5)
        content_type = response.headers.get('content-type', '')
        return response.status_code == 200 and content_type.startswith('image/')
    except Exception:
        return False

verify_image_tool = StructuredTool.from_function(
    name="verify_image_url",
    description=(
        "Checks if a given image URL is reachable and returns an image content-type. "
        "Arguments: url (string). Returns True if valid image, False otherwise."
    ),
    func=verify_image_url,
    args_schema=None
)

# ----------------------------- TOOL LIST -----------------------------
TOOLS = [search_tool, wiki_tool, save_tool, verify_image_tool]
